dnl Orage - Calendar application for Xfce
dnl
dnl Copyright (c) 2003-2022
dnl         The Xfce development team. All rights reserved.
dnl
dnl Written for Xfce by Juha Kautto <juha@xfce.org>
dnl

dnl Version information
m4_define([orage_version_major], [4])
m4_define([orage_version_minor], [16])
m4_define([orage_version_micro], [0])
m4_define([orage_version_build], [@REVISION@])
m4_define([orage_version_tag], [git]) # Leave empty for releases
m4_define([orage_version], [orage_version_major().orage_version_minor().orage_version_micro()ifelse(orage_version_tag(), [git], [orage_version_tag()-orage_version_build()], [orage_version_tag()])])

m4_define([glib_minimum_version], [2.52.0])
m4_define([gtk_minimum_version], [3.24.0])
m4_define([xfce_minimum_version], [4.16.0])
m4_define([dbus_minimum_version], [0.1])
m4_define([notify_minimum_version], [0.3.2])
m4_define([intltool_minimum_version], [0.35])
m4_define([libical_minimum_version], [3.0])


dnl # DO NOT MODIFY ANYTHING BELOW THIS LINE, UNLESS YOU KNOW WHAT
dnl # YOU ARE DOING.


dnl Initialize autoconf
AC_COPYRIGHT([Copyright (c) 2003-2022
        The Xfce development team. All rights reserved.

Written for Xfce by Juha Kautto <juha@xfce.org>.])
AC_INIT([orage], [orage_version], [xfce4-dev@xfce.org])
AC_CONFIG_MACRO_DIR([m4])
AC_CANONICAL_SYSTEM()
AC_PREREQ([2.50])
AC_REVISION([$Id$])

dnl Initialize automake
AM_INIT_AUTOMAKE()
AM_SILENT_RULES([yes])
AM_CONFIG_HEADER([config.h])
AM_MAINTAINER_MODE()

AC_PROG_CC([gcc clang cc])

dnl Check for UNIX variants
AC_AIX()
AC_ISC_POSIX()
AC_MINIX()
AM_CONDITIONAL([HAVE_CYGWIN], [test "`uname | grep \"CYGWIN\"`" != ""])

dnl Check for basic programs
AC_PROG_INSTALL()
IT_PROG_INTLTOOL([intltool_minimum_version])
AC_PROG_SED
AC_PROG_YACC()
AC_PROG_LN_S()
AM_PROG_LEX()
AM_PROG_CC_C_O()

dnl Initialize libtool
LT_PREREQ([2.2.6])
LT_INIT([disable-static])

dnl Check for standard header files
AC_HEADER_STDC()
AC_CHECK_HEADERS([assert.h errno.h pthread.h stdint.h time.h sys/types.h unistd.h wctype.h])

dnl Checks for typedefs, structures, and compiler characteristics (libical)
AC_C_CONST()
AC_TYPE_SIZE_T()
AC_TYPE_MODE_T()
AC_STRUCT_TM()

dnl Checks for library functions (libical)
AC_CHECK_FUNCS([gmtime_r iswspace strdup snprintf])

dnl Check for i18n support
XDT_I18N([@LINGUAS@])

dnl Check for required packages

dnl *******************************
dnl *** Check for X11 installed ***
dnl *******************************
XDT_CHECK_LIBX11_REQUIRE()

dnl XDT_CHECK_PACKAGE([LIBXFCEGUI4], [libxfcegui4-1.0], [xfce_minimum_version])
XDT_CHECK_PACKAGE([GLIB], [glib-2.0], [glib_minimum_version])
XDT_CHECK_PACKAGE([LIBGTK], [gtk+-3.0], [gtk_minimum_version])

dnl ************************************************
dnl *** Optional support for Xfce Panel          ***
dnl ************************************************
XDT_CHECK_OPTIONAL_PACKAGE([LIBXFCE4PANEL], [libxfce4panel-2.0],
                           [xfce_minimum_version], [libxfce4panel],
                           [LIBXFCE4PANEL support])

if test x"$LIBXFCE4PANEL_FOUND" = x"yes"; then
   XDT_CHECK_PACKAGE([LIBXFCE4UI], [libxfce4ui-2], [xfce_minimum_version])
fi

dnl *********************************************
dnl *** Optional support for external libical ***
dnl *********************************************
dnl *** This is optional NOW, but will become mandatory after external
dnl *** libical can do what Orage internal version can do or Orage works
dnl *** with it.
XDT_CHECK_OPTIONAL_PACKAGE([LIBICAL], [libical],
                           [libical_minimum_version], [libical],
                           [LIBICAL support])

if test x"$LIBICAL_FOUND" = x"yes"; then
echo "* LIBICAL support:           yes"
else
echo "* LIBICAL support:           no"
dnl the ical magic
ac_INCLUDED_LIBICAL=yes

dnl Check for additional programs (libical)
AC_CHECK_PROGS([AR], [ar aal], [ar])
AC_CHECK_PROGS([PERL], [perl5 perl])

AC_MSG_CHECKING(for Berkeley DB4 support)
AC_ARG_WITH(bdb4, [  --with-bdb4             Add support for Berkeley DB 4.0],
[case $with_bdb4 in
    yes)	AC_MSG_RESULT(yes)
    AC_MSG_RESULT(  Adding Berkeley DB support)
    WITH_BDB4="yes"
    ;;
    no)		AC_MSG_RESULT(no)
    ;;
    *)		AC_MSG_RESULT(no)
    AC_MSG_RESULT(Ignoring unknown argument to --with-bdb4: $with_bdb4)
    ;;
esac],
AC_MSG_RESULT(no))

if test x$WITH_BDB4 = xyes; then
  AC_ARG_WITH(bdb4_dir, [  --with-bdb4-dir=PATH    Use PATH as location of BerkeleyDB 4.0],
     BDB_DIR=$withval,
     BDB_DIR=/usr/local/BerkeleyDB.4.0
  )

  AC_MSG_CHECKING(for Berkeley DB include files)
  if test -f $BDB_DIR/include/db.h; then
   BDB_DIR_INCLUDE=$BDB_DIR/include
   AC_MSG_RESULT($BDB_DIR_INCLUDE)
  else
    if test -f $BDB_DIR/include/db4/db.h; then
     BDB_DIR_INCLUDE=$BDB_DIR/include/db4
     AC_MSG_RESULT($BDB_DIR_INCLUDE)
    else
     WITH_BDB4="no"
     AC_MSG_RESULT(not found!)
    fi
  fi

  AC_MSG_CHECKING(for Berkeley DB libraries)
  if test -f $BDB_DIR/lib/libdb-4.0.la; then
   BDB_DIR_LIB=$BDB_DIR/lib
   BDB_LIB=libdb-4.0.la
   AC_MSG_RESULT($BDB_DIR_LIB $BDB_LIB)
  else
    if test -f $BDB_DIR/lib/libdb4.la; then
     BDB_DIR_LIB=$BDB_DIR/lib
     BDB_LIB=libdb4.la
     AC_MSG_RESULT($BDB_DIR_LIB $BDB_LIB)
    else
     WITH_BDB4="no"
     AC_MSG_RESULT(not found!)
    fi
  fi

  AC_SUBST(BDB_DIR)
  AC_SUBST(BDB_DIR_INCLUDE)
  AC_SUBST(BDB_DIR_LIB)
  AC_SUBST(BDB_LIB)
  dnl 4.0 is required...
  BDB_VERSION="4.0"
  AC_SUBST(BDB_VERSION)
fi

AC_MSG_CHECKING(whether to define _REENTRANT)
AC_ARG_ENABLE(reentrant, [  --enable-reentrant      define _REENTRANT to enable reentrant system calls],
[ case "${enableval}" in
  no)
    AC_MSG_RESULT(no)
    ac_cv_reentrant=no
    ;;
  *)
    AC_MSG_RESULT(yes)
    AC_DEFINE([ICAL_REENTRANT], ,[Define if we want _REENTRANT]) [CFLAGS="$CFLAGS -D_REENTRANT"]
    ac_cv_reentrant=yes
    ;;
  esac ],
  AC_MSG_RESULT(no)
)
case "${host}" in
        *-*-freebsdelf4* )
    AC_MSG_RESULT(checking for pthread_create in -lpthread... -pthread (FreeBSD 4.x style))
    AC_DEFINE(HAVE_PTHREAD, ,[Define if we have pthread.])
    PTHREAD_LIBS=-pthread;;

  *)
  AC_CHECK_LIB([pthread], [pthread_create], [have_pthread=yes])
  if test "x$have_pthread" = xyes; then
     AC_DEFINE(HAVE_PTHREAD, ,[Define if we have pthread.])
     PTHREAD_LIBS=-lpthread
  fi;;
esac
AC_SUBST([PTHREAD_LIBS])
LIBICAL_DIRS="
libical/Makefile
libical/design-data/Makefile
libical/doc/Makefile
libical/scripts/Makefile
libical/src/Makefile
libical/src/libical/Makefile
libical/src/libical/icalversion.h
libical/src/libicalss/Makefile
libical/zoneinfo/Makefile"
fi

dnl **********************************
dnl *** check if we have _NL_TIME_FIRST_WEEKDAY 
dnl *** note that it is an enum and not a define
dnl **********************************
AC_MSG_CHECKING([for _NL_TIME_FIRST_WEEKDAY])
AC_TRY_LINK([#include <langinfo.h>], [
char c;
c = *((unsigned char *)  nl_langinfo(_NL_TIME_FIRST_WEEKDAY));
], nl_ok=yes, nl_ok=no)
AC_MSG_RESULT($nl_ok)
if test "$nl_ok" = "yes"; then
  AC_DEFINE([HAVE__NL_TIME_FIRST_WEEKDAY], [1],
      [Define if _NL_TIME_FIRST_WEEKDAY is available])
fi

AM_CONDITIONAL([INCLUDED_LIBICAL], [test x"$ac_INCLUDED_LIBICAL" = x"yes"])
AM_CONDITIONAL([HAVE_PTHREAD], [test x"$have_pthread" = x"yes"])
AM_CONDITIONAL([WITH_BDB4], [test x"$WITH_BDB4" = x"yes"])

dnl **********************************
dnl *** Optional support for D-BUS ***
dnl **********************************
XDT_CHECK_OPTIONAL_PACKAGE([DBUS], [dbus-glib-1],
                           [dbus_minimum_version], [dbus],
                           [D-BUS support])

dnl **************************************
dnl *** Optional support for libnotify ***
dnl **************************************
XDT_CHECK_OPTIONAL_PACKAGE([NOTIFY], [libnotify],
                           [notify_minimum_version], [libnotify],
                           [LIBNOTIFY support])

dnl **************************************
dnl *** Check support for libpopt      ***
dnl **************************************
AC_CHECK_LIB([popt], [poptGetContext],
        [have_popt="yes"
         AC_DEFINE([HAVE_LIBPOTPT], [1], [Define if we have popt])
        ])
AM_CONDITIONAL([HAVE_LIBPOTPT], [test x"$have_popt" = x"yes"])

dnl ************************************************
dnl *** Optional support for automatic archiving ***
dnl ************************************************
have_archive="no"
AC_ARG_ENABLE([archive],
AC_HELP_STRING([--enable-archive], [use automatic archiving (defaut=yes)])
AC_HELP_STRING([--disable-archive], [do not use automatic archiving]),
  [], [enable_archive=yes])
if test x"$enable_archive" = x"yes"; then
    AC_DEFINE([HAVE_ARCHIVE], [1], [Define to enable archiving])
    have_archive="yes"
fi

dnl ************************************************
dnl *** Optional support for 4.6 Xfce            ***
dnl ************************************************
dnl XDT_CHECK_OPTIONAL_PACKAGE([LIBXFCEGUI4], [libxfcegui4-1.0],
dnl                            [xfce_minimum_version], [libxfcegui4],
dnl                            [LIBXFCEGUI4 support])

dnl ************************************************
dnl *** Optional support for Xfce                ***
dnl ************************************************
XDT_CHECK_OPTIONAL_PACKAGE([LIBXFCE4UI], [libxfce4ui-2],
                           [xfce_minimum_version], [libxfce4ui],
                           [LIBXFCE4UI support])

dnl Check for debugging support
dnl BM_DEBUG_SUPPORT()
XDT_FEATURE_DEBUG

dnl the intention was to use variable
dnl $LIBICAL_DIRS
dnl to control if libical is being compiled or not, but only very
dnl recent autotools can have such variables in AC_OUTPUT.
dnl Reverting back to full list until time is right for using it.
dnl This causes some extra work at compile time, but should not cause
dnl any issues to users.

AC_OUTPUT([
Makefile
libical/Makefile
libical/design-data/Makefile
libical/doc/Makefile
libical/scripts/Makefile
libical/src/Makefile
libical/src/libical/Makefile
libical/src/libical/icalversion.h
libical/src/libicalss/Makefile
libical/zoneinfo/Makefile
xfcalendar.spec
icons/Makefile
icons/48x48/Makefile
icons/160x160/Makefile
icons/scalable/Makefile
po/Makefile.in
sounds/Makefile
src/Makefile
plugin/Makefile
doc/Makefile
doc/C/Makefile
doc/C/images/Makefile
panel-plugin/Makefile
globaltime/Makefile
tz_convert/Makefile
])

dnl ***************************
dnl *** Print configuration ***
dnl ***************************
echo
echo "Build Configuration:"
echo
if test x"$DBUS_FOUND" = x"yes"; then
echo "* D-BUS support:             yes"
else
echo "* D-BUS support:             no"
fi
if test x"$NOTIFY_FOUND" = x"yes"; then
echo "* LIBNOTIFY support:         yes"
else
echo "* LIBNOTIFY support:         no"
fi
if test x"$LIBICAL_FOUND" = x"yes"; then
echo "* LIBICAL support:           yes"
else
echo "* LIBICAL support:           no. Using Orage local libical"
fi
echo "* Automatic archiving:       $have_archive"
if test x"$have_popt" = x"yes"; then
echo "* libpopt available:         yes, building tz_convert"
else
echo "* libpopt not available:     no, not building tz_convert"
fi
if test x"$LIBXFCE4PANEL_FOUND" = x"yes"; then
echo "* LIBXFCE4PANEL support:     yes, building xfce panel plugin"
else
echo "* LIBXFCE4PANEL support:     no, not building xfce panel plugin"
fi
if test x"$LIBXFCE4UI_FOUND" = x"yes"; then
echo "* LIBXFCE4UI support:        yes"
else
echo "* LIBXFCE4UI support:        no"
fi
echo
